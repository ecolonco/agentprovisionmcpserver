version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_USER: mcpuser
      POSTGRES_PASSWORD: mcppassword
      POSTGRES_DB: mcpdb
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcpdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network
    restart: unless-stopped

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - mcp-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ============================================
  # Kafka (Optional - can be disabled)
  # ============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mcp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - mcp-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mcp-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - mcp-network
    restart: unless-stopped

  # ============================================
  # MCP Server Application
  # ============================================
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      APP_NAME: MCP Server
      APP_VERSION: 1.0.0
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO

      # API
      API_V1_PREFIX: /api/v1
      HOST: 0.0.0.0
      PORT: 8000

      # Security
      SECRET_KEY: dev-secret-key-change-in-production-12345678
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # Database
      DATABASE_URL: postgresql+asyncpg://mcpuser:mcppassword@postgres:5432/mcpdb

      # Redis
      REDIS_URL: redis://redis:6379/0

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

      # CORS
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080

    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    networks:
      - mcp-network
    restart: unless-stopped
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload

  # ============================================
  # Prometheus (Monitoring)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mcp-network
    restart: unless-stopped

  # ============================================
  # Grafana (Visualization)
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - prometheus

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  mcp-network:
    driver: bridge
